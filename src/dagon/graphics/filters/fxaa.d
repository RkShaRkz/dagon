/*
Copyright (c) 2017-2018 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dagon.graphics.filters.fxaa;

import dagon.core.ownership;
import dagon.graphics.postproc;
import dagon.graphics.framebuffer;

/*
 * FXAA implementation is based on demo by GeeXLab:
 * http://www.geeks3d.com/20110405/fxaa-fast-approximate-anti-aliasing-demo-glsl-opengl-test-radeon-geforce
 */
 
class PostFilterFXAA: PostFilter
{
    private static string vs = "
        #version 300 es
        precision highp float;
        
        uniform mat4 modelViewMatrix;
        uniform mat4 projectionMatrix;

        uniform vec2 viewSize;
        
        layout (location = 0) in vec2 va_Vertex;
        layout (location = 1) in vec2 va_Texcoord;

        out vec2 texCoord;
        
        void main()
        {
            texCoord = va_Texcoord;
            gl_Position = projectionMatrix * modelViewMatrix * vec4(va_Vertex * viewSize, 0.0, 1.0);
        }
    ";

    private static string fs = "
        #version 300 es
        precision highp float;
        
        uniform bool enabled;
        
        uniform sampler2D fbColor;
        uniform vec2 viewSize;
        
        in vec2 texCoord;
        out vec4 frag_color;

        const float FXAA_REDUCE_MIN = 1.0 / 128.0;
        const float FXAA_REDUCE_MUL = 1.0 / 8.0;
        const float FXAA_SPAN_MAX = 4.0;

        vec4 fxaa(sampler2D tex, vec2 fragCoord, vec2 resolution,
                   vec2 v_rgbNW, vec2 v_rgbNE, 
                   vec2 v_rgbSW, vec2 v_rgbSE, 
                   vec2 v_rgbM)
        {
            vec4 color;
            vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);
            vec3 rgbNW = texture(tex, v_rgbNW).xyz;
            vec3 rgbNE = texture(tex, v_rgbNE).xyz;
            vec3 rgbSW = texture(tex, v_rgbSW).xyz;
            vec3 rgbSE = texture(tex, v_rgbSE).xyz;
            vec4 texColor = texture(tex, v_rgbM);
            vec3 rgbM  = texColor.xyz;
            vec3 luma = vec3(0.299, 0.587, 0.114);
            float lumaNW = dot(rgbNW, luma);
            float lumaNE = dot(rgbNE, luma);
            float lumaSW = dot(rgbSW, luma);
            float lumaSE = dot(rgbSE, luma);
            float lumaM  = dot(rgbM,  luma);
            float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
            float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));
            
            vec2 dir;
            dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
            dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));
            
            float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *
                                  (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);
            
            float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);
            dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),
                      max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),
                      dir * rcpDirMin)) * inverseVP;
            
            vec3 rgbA = 0.5 * (
                texture(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +
                texture(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);
            vec3 rgbB = rgbA * 0.5 + 0.25 * (
                texture(tex, fragCoord * inverseVP + dir * -0.5).xyz +
                texture(tex, fragCoord * inverseVP + dir * 0.5).xyz);

            float lumaB = dot(rgbB, luma);
            if ((lumaB < lumaMin) || (lumaB > lumaMax))
                color = vec4(rgbA, texColor.a);
            else
                color = vec4(rgbB, texColor.a);
            return color;
        }

        void main()
        {
            vec2 fragCoord = gl_FragCoord.xy;
            vec2 invScreenSize = 1.0 / viewSize;

            vec3 color;
            if (enabled)
            {
                vec2 v_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * invScreenSize;
                vec2 v_rgbNE = (fragCoord + vec2(1.0, -1.0)) * invScreenSize;
                vec2 v_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * invScreenSize;
                vec2 v_rgbSE = (fragCoord + vec2(1.0, 1.0)) * invScreenSize;
                vec2 v_rgbM = vec2(fragCoord * invScreenSize);
                color = fxaa(fbColor, fragCoord, viewSize, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM).rgb; 
            }
            else
            {
                color = texture(fbColor, texCoord).xyz;
            }
        
            frag_color = vec4(color, 1.0); 
        }
    ";

    override string vertexShader()
    {
        return vs;
    }

    override string fragmentShader()
    {
        return fs;
    }

    this(Framebuffer inputBuffer, Framebuffer outputBuffer, Owner o)
    {
        super(inputBuffer, outputBuffer, o);
    }
}
